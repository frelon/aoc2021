fn main() {
    println!("answer1: {}", part1(input()));
    println!("answer2: {}", part2(input()));
}

fn part1(mut fishes:Vec<u32>) -> usize {
    for _ in 1..=80 {
        let mut num_spawned = 0;

        for f in fishes.iter_mut() {
            if *f == 0 {
                *f = 6;
                num_spawned += 1;
            } else {
                *f -= 1; 
            }
        }

        for _ in 0..num_spawned {
            fishes.push(8);
        }
    }
    fishes.len()
}

fn part2(input:Vec<u32>) -> u64 {
    let mut fishes = [0u64;9];

    for f in input {
        fishes[f as usize] += 1;
    }

    for _ in 1..=256 {
        let new = fishes[0];

        for i in 0..=7 {
            fishes[i] = fishes[i+1]
        }

        fishes[8] = new;
        fishes[6] += new;
    }

    sum(fishes)
}

fn sum(arr:[u64;9]) -> u64 {
    let mut total = 0;
    for n in arr {
        total += n;
    }

    total
}

fn input() -> Vec<u32> {
    vec![5,3,2,2,1,1,4,1,5,5,1,3,1,5,1,2,1,4,1,2,1,2,1,4,2,4,1,5,1,3,5,4,3,3,1,4,1,3,4,4,1,5,4,3,3,2,5,1,1,3,1,4,3,2,2,3,1,3,1,3,1,5,3,5,1,3,1,4,2,1,4,1,5,5,5,2,4,2,1,4,1,3,5,5,1,4,1,1,4,2,2,1,3,1,1,1,1,3,4,1,4,1,1,1,4,4,4,1,3,1,3,4,1,4,1,2,2,2,5,4,1,3,1,2,1,4,1,4,5,2,4,5,4,1,2,1,4,2,2,2,1,3,5,2,5,1,1,4,5,4,3,2,4,1,5,2,2,5,1,4,1,5,1,3,5,1,2,1,1,1,5,4,4,5,1,1,1,4,1,3,3,5,5,1,5,2,1,1,3,1,1,3,2,3,4,4,1,5,5,3,2,1,1,1,4,3,1,3,3,1,1,2,2,1,2,2,2,1,1,5,1,2,2,5,2,4,1,1,2,4,1,2,3,4,1,2,1,2,4,2,1,1,5,3,1,4,4,4,1,5,2,3,4,4,1,5,1,2,2,4,1,1,2,1,1,1,1,5,1,3,3,1,1,1,1,4,1,2,2,5,1,2,1,3,4,1,3,4,3,3,1,1,5,5,5,2,4,3,1,4]
}
